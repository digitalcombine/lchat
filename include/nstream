/*                                                                  -*- c++ -*-
 * Copyright Â© 2018 Ron R Wills <ron@digitalcombine.ca>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <streambuf>
#include <iostream>
#include <map>
#include <vector>

#include <ctime>
#include <sys/types.h>
#include <sys/select.h>

#ifndef _NETWORK_SOCKETS_H
#define _NETWORK_SOCKETS_H

namespace sockets {

  class connection;
  class server_base;

  /** Socket Exceptions
   */
  class exception : public std::exception {
  public:
    exception () noexcept;
    exception (const exception &other) noexcept;
    explicit exception (const char *message) noexcept;
    explicit exception (const std::string &message) noexcept;
    virtual ~exception() noexcept override;

    exception& operator= (const exception&) noexcept;

    virtual const char* what() const noexcept override {
      return message.c_str();
    }

  private:
    std::string message;
  };

  class ionotready : public exception {
  public:
    ionotready() noexcept;
    virtual ~ionotready() noexcept override;
  };

  class timeout : public exception {
  public:
    timeout() noexcept;
    virtual ~timeout() noexcept override;
  };

  /** Socket Stream Buffer
   */
  class socketbuf : public std::streambuf {
  public:
    socketbuf(size_t buffer = 1024);
    virtual ~socketbuf() noexcept override;

    /** Open a TCP/IP connection to the given host and service.
     */
    socketbuf *open(const std::string &hostname, const std::string &service);

    /** Open a socket to the give unix domain socket. If the socket doesn't exist
     * then it will attempt to create the socket file.
     */
    socketbuf *open(const std::string &filename);

    bool is_open() const { return (_fd > -1); }

    void close();

    int socket() const { return _fd; }

    friend class iosstream;
    friend class iostream;

    friend std::istream &msgdontwait(std::istream &ios);

  protected:
    virtual int_type overflow(int_type ch) override;
    virtual int sync() override;

    virtual int_type underflow() override;

  private:
    int _fd;
    int _rflags;
    int _sflags;

    std::vector<char> _obuf;
    std::vector<char> _ibuf;

    bool _notready;

    socketbuf(int sockfd, size_t buffer = 1024);
    bool oflush();
  };

  /** Socket Client Stream
   */
  class iostream : public std::iostream {
  public:
    iostream(size_t buffer = 1024);
    iostream(const std::string &hostname, const std::string &service,
             size_t buffer = 1024);
    iostream(const std::string &filename, size_t buffer = 1024);
    virtual ~iostream() noexcept override;

    inline void open(const std::string &hostname, const std::string &service) {
      _sockbuf.open(hostname, service);
    }
    inline void open(const std::string &filename) { _sockbuf.open(filename); }

    inline bool is_open() const { return _sockbuf.is_open(); }
    void close();

    int socket() { return _sockbuf.socket(); }

    friend std::istream &nonblock(std::istream &ios);
    friend std::istream &block(std::istream &ios);
    friend std::istream &msgdontwait(std::istream &ios);

    friend std::ostream &keepalive(std::ostream &ios);
    friend std::ostream &nokeepalive(std::ostream &ios);

    friend class recvtimeout;
    friend class connection;

  private:
    iostream(int sockfd, size_t buffer = 1024);

    socketbuf _sockbuf;
  };

  template <class Ty>
  class osmanip {
  public:
    explicit osmanip(Ty a) : arg(a) {}

    virtual std::ostream &operator()(std::ostream &is) const = 0;

  protected:
    Ty arg;
  };

  template <class Ty>
  class ismanip {
  public:
    explicit ismanip(Ty a) : arg(a) {}
    virtual ~ismanip() noexcept {}

    virtual std::istream &operator()(std::istream &is) const = 0;

  protected:
    Ty arg;
  };

  /****************************************************************************
   * Input Stream Modifiers
   */

  std::istream &nonblock(std::istream &ios);
  std::istream &block(std::istream &ios);
  std::istream &msgdontwait(std::istream &ios);

  std::ostream &keepalive(std::ostream &ios);
  std::ostream &nokeepalive(std::ostream &ios);

  class recvtimeout : public ismanip<timeval> {
  public:
    recvtimeout(timeval &a) : ismanip(a) {}
    virtual std::istream &operator()(std::istream &ios) const override;
  };

  /** Server Client Connection.
   */
  class connection {
  public:
    connection(int sockfd);
    virtual ~connection() noexcept;

    operator iostream &() { return ios; }

    friend class server_base;

  protected:
    iostream ios;

    virtual void connect(int sockfd);
    virtual void recv() = 0;
    void close();
  };

  /**
   */
  class server_base {
  public:

    typedef std::map<int, connection *>::iterator iterator;

    server_base();
    virtual ~server_base() noexcept;

    void open(const char *hostname, const char *service);
    void open(const std::string &filename);

    bool is_open() const { return (sockfd > -1); }

    void close();

    void process_requests();

    [[noreturn]] void operator()();

    iterator begin() { return _clients.begin(); }
    iterator end() { return _clients.end(); }

    /** Returns the number of connected clients.
     */
    size_t connections() const { return _clients.size(); }

  protected:

    virtual connection *new_connection(int sockfd) = 0;

  private:
    int sockfd;
    fd_set active_fd_set;
    struct timeval timeout;

    std::map<int, connection *> _clients;
  };

  template <class Ty> class server : public server_base {
  public:
    server() : server_base() {}

  protected:
    virtual connection *new_connection(int sockfd) { return new Ty(sockfd); }
  };
}

template <class Ty>
std::ostream& operator <<(std::iostream &os,
                          const sockets::osmanip<Ty> &manip) {
  return manip(os);
}

template <class Ty>
std::istream& operator >>(std::istream &is,
                          const sockets::ismanip<Ty> &manip) {
  return manip(is);
}

#endif /* _NETWORK_SOCKETS_H */
