/*                                                                  -*- c++ -*-
 * Copyright Â© 2019-2021 Ron R Wills <ron@digitalcombine.ca>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <_p_curses>
#include <iostream>

#include <vector>
#include <signal.h>

#define CURS_VERSION VERSION

#pragma once

namespace curs {

  /**
   */
  class terminal {
  public:
    /** Return the terminal type for the currently set terminal.
     * @see set
     */
    static std::string type();

    static void clear();

    static void update();

    static void cbreak(bool value);

    static void raw(bool value);

    static void echo(bool value);

    static int halfdelay(int time) { return ::halfdelay(time); }

    static void cursor(bool show);

    static int getch() { return ::getch(); }

    static void filter() { ::filter(); }

    static void flash() { ::flash(); }

    static void beep() { ::beep(); }

    /** Setup the default terminal using curses initscr. The environment
     * variable TERM is used to determine the terminals type.
     */
    terminal();

    /** Setup a terminal using the given file descriptors as the terminals
     * input and output. The environment variable TERM is used to determine
     * the terminals type.
     * @param outfd The terminals output file descriptor.
     * @param infd The terminals input file descriptor.
     * @{
     */
    terminal(int outfd, int infd);
    terminal(FILE *outfile, FILE *infile);
    terminal(const std::string &term, int outfd, int infd);
    terminal(const std::string &term, FILE *outfile, FILE *infile);
    /** @} */

    /** Reset and clean up the terminal.
     */
    virtual ~terminal() noexcept;

    /** Set the current terminal to this terminal.
     */
    void set() const;

  private:
    SCREEN *screen;
  };

  /** A stream buffer that writes to a curses window.
   */
  class windowbuf : public std::streambuf {
  public:
    windowbuf(WINDOW *win, bool free_window = false, size_t buffer = 2048);
    windowbuf(const windowbuf &other) = delete;
    virtual ~windowbuf() noexcept;

    WINDOW *window() const { return _window; }

  protected:
    virtual int_type overflow(int_type ch);
    virtual int sync();

  private:
    WINDOW *_window;
    bool _free_window;
    bool _use_stdscr;

    std::vector<char> _obuf;

    bool oflush();
  };

  /** A stream buffer that writes to a curses pad.
   */
  class padbuf : public std::streambuf {
  public:
    padbuf(WINDOW *win, int x, int y, int width, int height,
           size_t buffer = 2048);
    padbuf(int width, int height, size_t buffer = 2048);
    virtual ~padbuf() noexcept;

    WINDOW *window() const { return _pad; }

  protected:
    virtual int_type overflow(int_type ch);
    virtual int sync();

  private:
    WINDOW *_pad;

    int _x, _y;
    int dest_x, dest_y, dest_width, dest_height;

    std::vector<char> _obuf;

    bool oflush();
  };

  /** The base output stream type for curses windows.
   */
  class base_ostream : public std::ostream {
  public:
    explicit base_ostream(std::streambuf* sb) : std::ostream(sb) {}
    virtual ~base_ostream() noexcept;

    /** Return the position of the cursor.
     */
    void cursor(int &x, int &y) const;

    /** Return the size of the curses window.
     */
    void size(int &width, int &height) const;
    void position(int &x, int &y) const;
    int width() const;
    int height() const;
    int x() const;
    int y() const;

    virtual operator WINDOW *() const = 0;

    friend std::ostream &clear(std::ostream &os);
    friend std::ostream &erase(std::ostream &os);
    friend std::ostream &clrtobot(std::ostream &os);
    friend std::ostream &clrtoeol(std::ostream &os);
    friend std::ostream &touch(std::ostream &os);
    friend std::ostream &noutrefresh(std::ostream &os);
    friend std::ostream &cursyncup(std::ostream &os);
    friend std::ostream &syncdown(std::ostream &os);
    friend std::ostream &syncup(std::ostream &os);
    friend std::ostream &resize(std::ostream &os);
    friend class keypad;
    friend class nodelay;
    friend class scrollok;
    friend class leaveok;
    friend class idlok;
    friend class syncok;
    friend class setscrreg;
    friend class attron;
    friend class attroff;
    friend class attrset;
    friend class pairon;
    friend class pairoff;
    friend class bkgrnd;
    friend class bkgrndset;
    friend class cursor;
    friend class hline;
    friend class vline;
    friend class box;
    friend class border;
    friend class resize;
    friend class move;

  private:
    virtual void noutrefresh() const = 0;
    virtual void refresh() const = 0;
  };

  /**
   */
  class window : public base_ostream {
  public:
    window();
    window(int x, int y, int width, int height);
    window(const window &parent, int x, int y, int width, int height);
    window(const window &other) = delete;
    virtual ~window() noexcept;

    virtual operator WINDOW *() const;

  private:
    //window *_parent;
    windowbuf _windowbuf;

    virtual void noutrefresh() const;
    virtual void refresh() const;
  };

  /**
   */
  class pad : public base_ostream {
  public:
    pad(int width, int height);
    pad(const base_ostream &parent, int x, int y, int width, int height);
    pad(const pad &other) = delete;
    virtual ~pad() noexcept;

    virtual operator WINDOW *() const;

  private:
    //window *_parent;
    padbuf _padbuf;

    virtual void noutrefresh() const;
    virtual void refresh() const;
  };

  /***************************************************************************
   * Window IO Manipulators
   */

  class cchar {
  public:
    cchar(wchar_t ch);
    cchar(short color_pair, wchar_t ch);
#ifdef HAVE_NCURSESW_H
    cchar(const cchar_t *ch);
#else
    cchar(chtype ch);
#endif
    cchar(const cchar &other);

#ifdef HAVE_NCURSESW_H
    operator const cchar_t *() const { return &_character; }
#else
    operator chtype () const { return _character; }
#endif

  private:
#ifdef HAVE_NCURSESW_H
    cchar_t _character;
#else
    chtype _character;
#endif
  };

  class osmanip {
  public:
    virtual ~osmanip() noexcept;
    virtual std::ostream &operator()(std::ostream &os) const = 0;
  };

  std::ostream &clear(std::ostream &os);
  std::ostream &erase(std::ostream &os);
  std::ostream &clrtobot(std::ostream &os);
  std::ostream &clrtoeol(std::ostream &os);
  std::ostream &touch(std::ostream &os);
  std::ostream &cursyncup(std::ostream &os);
  std::ostream &syncdown(std::ostream &os);
  std::ostream &syncup(std::ostream &os);
  std::ostream &noutrefresh(std::ostream &os);

  class keypad : public osmanip {
  public:
    explicit keypad(bool use) : _use(use) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _use;
  };

  class nodelay : public osmanip {
  public:
    explicit nodelay(bool value) : _value(value) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _value;
  };

  class scrollok : public osmanip {
  public:
    explicit scrollok(bool value) : _value(value) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _value;
  };

  class leaveok : public osmanip {
  public:
    explicit leaveok(bool value) : _value(value) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _value;
  };

  class idlok : public osmanip {
  public:
    explicit idlok(bool value) : _value(value) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _value;
  };

  class syncok : public osmanip {
  public:
    explicit syncok(bool value) : _value(value) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _value;
  };

  class setscrreg : public osmanip {
  public:
    explicit setscrreg(int top, int bottom) : _top(top), _bottom(bottom) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _top, _bottom;
  };

  class attron : public osmanip {
  public:
    explicit attron(int attr) : _attr(attr) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _attr;
  };

  class attroff : public osmanip {
  public:
    explicit attroff(int attr) : _attr(attr) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _attr;
  };

  class attrset : public osmanip {
  public:
    explicit attrset(int attr) : _attr(attr) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _attr;
  };

  class pairon : public osmanip {
  public:
    explicit pairon(short color_pair) : _color_pair(color_pair) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    short _color_pair;
  };

  class pairoff : public osmanip {
  public:
    explicit pairoff(short color_pair) : _color_pair(color_pair) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    short _color_pair;
  };

  class bkgrnd : public osmanip {
  public:
    explicit bkgrnd(const cchar &character) :  _character(character) {}
    virtual std::ostream &operator()(std::ostream &os) const;

  private:
#ifdef HAVE_NCURSESW_H
    const cchar_t *_character;
#else
    chtype _chacacter;
#endif
  };

  class bkgrndset : public osmanip {
  public:
    explicit bkgrndset(const cchar &character) :  _character(character) {}
    virtual std::ostream &operator()(std::ostream &os) const;

  private:
#ifdef HAVE_NCURSESW_H
    const cchar_t *_character;
#else
    chtype _chacacter;
#endif
  };

  class cursor : public osmanip {
  public:
    explicit cursor(int x, int y) : _op(POSITION), _x(x), _y(y) {}
    explicit cursor(bool show) : _op(VISIBLITY), _show(show) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    enum {POSITION, VISIBLITY} _op;
    int _x, _y;
    bool _show;
  };

  class hline : public osmanip {
  public:
    explicit hline(int length) : _move(false), _character(nullptr),
                                 _length(length) {}
    explicit hline(int length, const cchar &character)
      : _character(character), _length(length) {}
    explicit hline(int x, int y, int length)
      : _move(true), _x(x), _y(y), _character(nullptr), _length(length) {}
    explicit hline(int x, int y, int length, const cchar &character)
      : _move(true), _x(x), _y(y), _character(character), _length(length) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _move;
    int _x, _y;
    const cchar_t *_character;
    int _length;
  };

  class vline : public osmanip {
  public:
    explicit vline(int length) : _move(false), _character(nullptr),
                                 _length(length) {}
    explicit vline(int length, const cchar &character)
      : _move(false), _character(character), _length(length) {}
    explicit vline(int x, int y, int length)
      : _move(true), _x(x), _y(y), _character(nullptr), _length(length) {}
    explicit vline(int x, int y, int length, const cchar &character)
      : _move(true), _x(x), _y(y), _character(character), _length(length) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    bool _move;
    int _x, _y;
    const cchar_t *_character;
    int _length;
  };

  class box : public osmanip {
  public:
    box() : _horch(nullptr), _verch(nullptr) {}
    explicit box(const cchar &horch, const cchar &verch)
      : _horch(horch), _verch(verch) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    const cchar_t *_horch, *_verch;
  };

  class border : public osmanip {
  public:
    explicit border(const cchar_t *ls = nullptr, const cchar_t *rs = nullptr,
                    const cchar_t *ts = nullptr, const cchar_t *bs = nullptr,
                    const cchar_t *tl = nullptr, const cchar_t *tr = nullptr,
                    const cchar_t *bl = nullptr, const cchar_t *br = nullptr)
      : _ls(ls), _rs(rs), _ts(ts), _bs(bs), _tl(tl), _tr(tr), _bl(bl),
        _br(br) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    const cchar_t *_ls, *_rs, *_ts, *_bs, *_tl, *_tr, *_bl, *_br;
  };

  class resize : public osmanip {
  public:
    explicit resize(int width, int height)
      : _width(width), _height(height) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _width, _height;
  };

  class move : public osmanip {
  public:
    explicit move(int x, int y) : _x(x), _y(y) {}
    virtual std::ostream &operator()(std::ostream &os) const;
  private:
    int _x, _y;
  };

  /***************************************************************************
   */

  class colors {
  public:
    static const unsigned int BLACK   = COLOR_BLACK;
    static const unsigned int RED     = COLOR_RED;
    static const unsigned int GREEN   = COLOR_GREEN;
    static const unsigned int YELLOW  = COLOR_YELLOW;
    static const unsigned int BLUE    = COLOR_BLUE;
    static const unsigned int MAGENTA = COLOR_MAGENTA;
    static const unsigned int CYAN    = COLOR_CYAN;
    static const unsigned int WHITE   = COLOR_WHITE;

    static bool have() { return (::has_colors() == TRUE); }
    static bool can_change() { return (::can_change_color() == TRUE); }
    static inline int start() { return start_color(); }

    static inline int count() { return COLORS; }
    static inline int pairs() { return COLOR_PAIRS; }

    static inline int pair(short index, short fg, short bg) {
      return init_pair(index, fg, bg);
    }
    static inline int pair(int index) { return COLOR_PAIR(index); }

    static inline int color(short index, short r, short g, short b) {
      return init_color(index, r, g, b);
    }

    static inline int get_rgb(int index, short &r, short &g, short &b) {
      return color_content(index, &r, &g, &b);
    }

    static inline int get_color(short index, short &fg, short &bg) {
      return pair_content(index, &fg, &bg);
    }
  };

  namespace events {
    /** Process one event.
     */
    void process();

    /** Main event loop.
     */
    void main();

    /** Shuts down the main event loop.
     */
    void quit();
  }

  class resize_event_handler {
  public:
    resize_event_handler();
    virtual ~resize_event_handler() noexcept;

  protected:
    virtual void resize_event();

  private:
    static resize_event_handler *_handler;

#if defined (__FreeBSD__)
    sig_t _orig_handler;
#else
    sighandler_t _orig_handler;
#endif

    static void _callback(int signal);
  };

  class keyboard_event_handler {
  public:
    keyboard_event_handler();

    void focus();
    bool has_focus() const;

    friend void events::main();
    friend void events::process();

  protected:

    virtual void key_event(int ch) = 0;
    virtual void lose_focus();
    virtual void gain_focus();
  };

  class mouse_event_handler {
  public:
    mouse_event_handler();
    virtual ~mouse_event_handler() noexcept;

    friend void events::main();
    friend void events::process();

  protected:

    virtual void event(short id, int x, int y, mmask_t buttons) = 0;
  };
}

std::ostream & operator <<(std::ostream &ios, const curs::osmanip &manip);
