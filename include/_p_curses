/*                                                                  -*- c++ -*-
 * Copyright Â© 2018 Ron R Wills <ron@digitalcombine.ca>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef HAVE_NCURSESW_H
#define NCURSES_WIDECHAR 1
#endif
#include <curses.h>

/* This is a private header to convert the macro functions found in the
 * curses library into inline functions to prevent namespace collisions.
 *
 * We placed this here to prevent cluttering up the curses header.
 */

#ifdef addch
inline int (addch)(const chtype ch) { return addch(ch); }
#undef addch
#endif

#ifdef attron
inline int (attron)(int attr) { return attron(attr); }
#undef attron
#endif

#ifdef attroff
inline int (attroff)(int attr) { return attroff(attr); }
#undef attroff
#endif

#ifdef attrset
inline int (attrset)(int attr) { return attrset(attr); }
#undef attrset
#endif

#ifdef bkgd
inline int (bkgd)(chtype ch) { return bkgd(ch); }
#undef bkgd
#endif

#ifdef border
inline int (border)(chtype ls, chtype rs, chtype ts, chtype bs, chtype tl,
                    chtype tr, chtype bl, chtype br) {
  return border(ls, rs, ts, bs, tl, tr, bl, br);
}
#undef border
#endif

#ifdef clrtobot
inline int (clrtobot)() { return clrtobot(); }
#undef clrtobot
#endif

#ifdef clrtoeol
inline int (clrtoeol)() { return clrtoeol(); }
#undef clrtoeol
#endif

#ifdef getch
inline int (getch)() { return getch(); }
#undef getch
#endif

#ifdef getyx
inline void (getyx)(WINDOW *win, int &y, int &x) { getyx(win, y, x); }
#undef getyx
#endif

#ifdef getmaxyx
inline void (getmaxyx)(WINDOW *win, int &y, int &x) { getmaxyx(win, y, x); }
#undef getmaxyx
#endif

#ifdef getparyx
inline void (getparyx)(WINDOW *win, int &y, int &x) { getparyx(win, y, x); }
#undef getparyx
#endif

#ifdef getbegyx
inline void (getbegyx)(WINDOW *win, int &y, int &x) { getbegyx(win, y, x); }
#undef getbegyx
#endif

#ifdef hline
inline int (hline)(chtype ch, int n) { return hline(ch, n); }
#undef hline
#endif

#ifdef vline
inline int (vline)(chtype ch, int n) { return vline(ch, n); }
#undef vline
#endif

#ifdef mvwaddstr
inline int (mvwaddstr)(WINDOW *win, int y, int x, const char *str) {
  return mvwaddstr(win, y, x, str);
}
#undef mvwaddstr
#endif

#ifdef waddch
inline int (waddch)(WINDOW *win, const chtype ch) { return waddch(win, ch); }
#undef waddch
#endif

#ifdef wattrset
inline int (wattrset)(WINDOW *win, int attr) { return wattrset(win, attr); }
#undef wattrset
#endif

#ifdef wclrtoeol
inline int (wclrtoeol)(WINDOW *win) { return wclrtoeol(win); }
#undef wclrtoeol
#endif

#ifdef whline
inline int (whline)(WINDOW *win, chtype ch, int n) {
  return whline(win, ch, n);
}
#undef whline
#endif

#ifdef wvline
inline int (wvline)(WINDOW *win, chtype ch, int n) {
  return wvline(win, ch, n);
}
#undef wvline
#endif

#ifdef mvwhline
inline int (mvwhline)(WINDOW *win, int y, int x, chtype ch, int n) {
  return mvwhline(win, y, x, ch, n);
}
#undef mvwhline
#endif

#ifdef mvwhline_set
inline int (mvwhline_set)(WINDOW *win, int y, int x, const cchar_t *wch, int n) {
  return mvwhline_set(win, y, x, wch, n);
}
#undef mvwhline_set
#endif

#ifdef mvwvline
inline int (mvwvline)(WINDOW *win, int y, int x, chtype ch, int n) {
  return mvwvline(win, y, x, ch, n);
}
#undef mvwvline
#endif

#ifdef mvwvline_set
inline int (mvwvline_set)(WINDOW *win, int y, int x, const cchar_t *wch, int n) {
  return mvwvline_set(win, y, x, wch, n);
}
#undef mvwvline_set
#endif

#ifdef scroll
inline int (scroll)(WINDOW *win) {
  return scroll(win);
}
#undef scroll
#endif

#ifdef setscrreg
inline int (setscrreg)(int top, int bot) {
  return setscrreg(top, bot);
}
#undef setscrreg
#endif

#ifdef bkgrnd
inline int (bkgrnd)(const cchar_t *wch) {
  return bkgrnd(wch);
}
#undef bkgrnd
#endif

#ifdef bkgrndset
inline void (bkgrndset)(const cchar_t *wch) {
  bkgrndset(wch);
}
#undef bkgrndset
#endif

#ifdef touchwin
inline int (touchwin)(WINDOW *win) {
  return touchwin(win);
}
#undef touchwin
#endif
